<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on Lim's Blog</title><link>/categories/tech/</link><description>Recent content in Tech on Lim's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 08 May 2021 18:35:53 +0800</lastBuildDate><atom:link href="/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Caddy2 + Hugo + Github Actions 的自动化部署博客方案</title><link>/post/caddy-hugo-github-actions-for-blog/</link><pubDate>Sat, 08 May 2021 18:35:53 +0800</pubDate><guid>/post/caddy-hugo-github-actions-for-blog/</guid><description>我的博客部署流程如下：
写文章并推送到 username.github.io 仓库的 hugo 分支。 GitHub Actions 自动构建并推送到 main 分支。 GitHub 发送 webhook 请求到自有服务器，服务器拉取更新。 不使用 GitHub Page 的原因主要是在国内访问太慢，而且有服务器闲置，正好用来部署博客。
而使用 GitHub Actions 先构建推送到 main，然后再在服务器上拉取的原因是可以在 GitHub Page 上有一个备份，服务器出现故障时可以先 302 重定向到 GitHub Page，解决故障后切换回来。
为了实现这个流程，在服务器上需要用到一个服务：Caddy
Caddy 是基于 go 编写的 web 服务器，相比于 nginx 和 apache 的优点就是能自动申请 SSL 证书，自动更新证书。
当然，有人会说这类文章网上已经有很多了，为什么还要重复再写一篇。一个重要的原因是网上的的文章都是基于 Caddy V1 版本，而在 Caddy 更新到 V2 版本后，之前的插件都已经失效了。
本着用新不用旧的原则，我也将 Caddy 更新到 V2，但也因为这样需要重新配置第 3 步的部署流程。
为了实现第 3 步，我给 Caddy 写了一个模块：caddy-webhook，下面通过具体的步骤来展示如何使用这个模块。
建立仓库 建立一个 username.</description></item><item><title>使用 GiHub Actions 构建多架构 Docker 镜像</title><link>/post/build-docker-image-in-multi-archs-with-github-actions/</link><pubDate>Sat, 17 Apr 2021 15:00:52 +0800</pubDate><guid>/post/build-docker-image-in-multi-archs-with-github-actions/</guid><description>Docker为我们提供了一个一键式部署代码环境的方式，透过Docker Image我们可以不关心当前的操作系统的环境，只需要拉取镜像下来即可获得一致的运行环境。
但仍存在一个问题，如果你直接使用 docker build ，构建出来的镜像是基于你当前机器的CPU架构。当然，你也可以将代码和 Dockerfile 拉到虚拟机中进行构建，但这会花费很多时间。
通过 GitHub Actions，我们可以在 push 代码的时候，自动进行多架构的镜像构建，不再需要手动构建并推送到 Docker Hub 等镜像仓库中。
下面是一个示例：
这是我在 kea-dhcp4 中使用的 GitHub Actions 构建脚本的一部分
要推送到 DockerHub，则需要在 repo 的 sercrets 中设置 DockerHub 的用户名及 TOKEN
TOKEN 的生成参考：Managing access tokens
要推送到 GitHub 的镜像仓库，即 ghcr.io 中则需要设置 PAT(Personal Access Token)
CR_PAT 的生成参考：Migrating to GitHub Container Registry for Docker images
name:buildon:push:branches:[main ]paths-ignore:- &amp;#34;README.md&amp;#34;jobs:build:runs-on:ubuntu-lateststeps:-name:Checkoutuses:actions/checkout@v2-name:Set up QEMUuses:docker/setup-qemu-action@v1-name:Set up Docker Buildxuses:docker/setup-buildx-action@v1-name:Login to DockerHubuses:docker/login-action@v1with:username:${{ secrets.DOCKERHUB_USERNAME }}password:${{ secrets.DOCKERHUB_TOKEN }}-name:Login to GitHub Container Registryuses:docker/login-action@v1 # 在 sercrets 中设置 CR_PAT# with:registry:ghcr.</description></item><item><title>戴尔 5070MFF 黑苹果体验</title><link>/post/dell-optiplex-5070mff-hackintosh/</link><pubDate>Wed, 10 Mar 2021 19:09:40 +0800</pubDate><guid>/post/dell-optiplex-5070mff-hackintosh/</guid><description>EFI开源托管在GitHub：Dell-Optiplex-5070mff-Hackintosh
配置介绍 硬件配置：
准系统: Dell OptiPlex 5070 Micro Form Factor CPU: Intel® Core™ i5-9500T Processor 核显: Intel® UHD Graphics 630 内存: 8GB DDR4 2666 * 2 双通道 硬盘: KIOXIA RC10 NVME SSD 500G Wi-Fi &amp;amp; Bluetooth: DW1820A 声卡: Realtek ALC255(3234) 板载网卡: Intel I219-LM7 接口配置：
前面板：
通用音频接口 有线音频输出 Type C(USB3.1 Gen2 PowerShare) 注：不是雷电接口 Type-A USB接口(USB 3.1 Gen1 PowerShare) 后面板：
RJ-45网线接口 Type-A USB接口(USB 3.</description></item><item><title>C语言项目单元测试实践</title><link>/post/c-unittest-example/</link><pubDate>Tue, 22 Dec 2020 21:50:57 +0800</pubDate><guid>/post/c-unittest-example/</guid><description>前言 最近一段时间在写C语言的课程设计，之前在用 Golang 的时候，Golang 自带单元测试，用起来非常舒服，而C语言不使用框架写测试则会很麻烦，下面通过一个简单的项目来实践在C语言中进行单元测试。
项目中使用 CMocka 作为单元测试框架，使用 CodeCov 检查代码覆盖率。
完整项目代码可以在 GitHub 上查看：c-unittest-example
项目目录 . ├── CMakeLists.txt ├── Makefile ├── README.md ├── cmake │ ├── CMocka.cmake │ └── CodeCov.cmake ├── include │ └── add.h ├── src │ └── add.c └── test ├── CMakeLists.txt ├── add_tests.c └── test.h 4 directories, 10 files 目录说明 cmake: 存放 CMake 的模块文件，包括 CMocka 和 CodeCov。</description></item></channel></rss>