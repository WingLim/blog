[{"content":"最近在使用 WSL 作为开发环境，但有些图形化软件无法打开，例如 Qemu，通过 X11 Forwarding 来使得 Qemu 正常显示。\n什么是 X 协议 X 协议由 X server 和 X client 组成：\nX server 管理主机上与显示相关的硬件设置（如显卡、硬盘、鼠标等），它负责屏幕画面的绘制与显示，以及将输入设置（如键盘、鼠标）的动作告知 X client。\nX client (即 X 应用程序) 则主要负责事件的处理（即程序的逻辑）。\n什么是 X11 Forwarding 许多时候 X server 和 X client 在同一台主机上，这看起来没什么。但是， X server 和 X client 完全可以运行在不同的机器上，只要彼此通过 X 协议通信即可。\n于是，我们就可以做一些“神奇”的事情，在本地显示 (X server)运行在服务器上的 GUI 程序 (X client)。这样的操作可以通过 SSH X11 Forwarding 来实现。X11 中的 X 指的就是 X 协议，11 指的是采用 X 协议的第 11 个版本。\n在 Windows 上安装 X server   是选择使用 MobaXterm ，这个软件集成了 X server\n  安装 VcXsrv Windows X Server\n  安装完 VcXsrv 后，打开 XLaunch ：\n选择 Multiple windows ,则只会传输软件窗口本身，而其他三个则会传输整个桌面环境。其余选项选择默认即可。\n然后在 .bashrc 或 .zshrc 中添加显示器地址：\n1  export DISPLAY=localhost:0   同时确保在 /etc/ssh/sshd_config 中有 X11Forwarding yes 且未被注释掉。\n测试 1 2 3 4  # 安装 x11-apps sudo apt install x11-apps # 打开 xclock xclock   若出现如下窗口则开启成功：\n","description":"","id":0,"section":"posts","tags":["WSL","Qemu"],"title":"在 WSL 中使用 X11 Forwarding","uri":"https://limxw.com/posts/use-x11-in-wsl/"},{"content":"大二，在杭州，12月份没有雪，但依然很冷。\n总结 这一年都在折腾一些小项目，发现自己在编程方面的理论知识懂得太少，脑子里还是一直摆脱不掉想去计算机专业的想法。也不是不能自己去学，但机械自己的专业课内容就已经很多了，光是学这个就没有精力去干别的了。\n学了一年的机械专业课，发现自己果然还是不喜欢物理，但对工程图学还是蛮感兴趣的，因为我挺喜欢画画，只是在画画上没有点天赋点。这种工业设计的不需要太多设计，还是蛮简单的。\n项目 Fischertechnik 和同学一起参加了第十六届浙江省大学生机械创意设计大赛慧鱼组，最后拿了省二等奖，这应该算是这一年最有成就的事情了。\nPython 这一年用 Python 写了不少爬虫，但都像开头说的，都是些自娱自乐的小项目\n 学校招标采购信息 namesilo 域名续费价格信息及提醒 选课系统自动抢课（未完工）  然后还在学校财务处那边接了个项目：学分清算系统，用来计算马上要毕业的大四学生的学费缴纳情况。\nArduino 然后也研究了硬件，用Arduino写了个“智能”门锁，本来想换成电磁锁，但要和学校报备，就改用步进电机来物理操控了。 ESP8266 做终端，MFRC522 读取一卡通信息，步进电机拉动/释放门闩。\nNode.js 为了实现远程控制“智能”门锁，用 Node.js 写了个服务端，用 WebSocket 来和 ESP8266 长连接，访问网页验证身份信息后可以直接开关宿舍门。\n消费  Samsung Tab S4  在 iPad 和三星平板上纠结了很久，最后还是入了三星，没钱是其一，其二是安卓比iPad OS 要开放太多了，换了 iPhone 7 之后就很久没玩过 Android 了，最后购入到使用，还是十分满意的。\nHonor Magic 2  24期分期免息真香。但买的主要原因是因为我有三张卡，一张是家里的，一张绑了支付宝和很多银行卡的，还有一张学校的。虽然因为滑盖设计导致手机很重，但这种没有刘海，不是挖孔的屏幕在视觉体验上确实很惊艳，\nOclean X  牙口不好，有段时间牙龈发炎严重，导致很疼，除了戒辛辣以外还得勤刷牙。但是因为小时候习惯不好，刷牙总是草草了事，于是就买了电动牙刷，提高清洁效果。不过说实话，牙刷上有个显示屏确实没啥用。\n京东京造 马丁靴  这应该是这一年在服装上买到的最满意的东西了，不仅增高，而且百搭好看（外观上和红翼非常像）。\n影视 电视剧 这一年看了非常多的电视剧，大概我碌碌无为的原因就在这了吧，列一下我觉得好看的。\n 《我们与恶的距离》 《秘密森林》 《我的大叔》 《去他*的世界》 《轮到你了》（可恶，烂尾了！ 《非自然死亡》 《亿万》 《超感猎杀》  电影 电影的话补了挺多以前想看的老电影，退了学生会之后就基本没人一起去看院线片了，不过自己一个人去电影院看电影也别有一般风味，可以沉浸在电影世界里面。\n 《寄生虫》 《82年生的金智英》 《小丑》 《天气之子》 《哪吒之魔童降世》（希望之后的国产动画电影能出更多的精品吧 《复仇者联盟4：终局之战》  展望 2020 正视自己的不足，改进，创造更多价值。\n","description":"","id":1,"section":"posts","tags":null,"title":"2019年终总结","uri":"https://limxw.com/posts/2019/"},{"content":"想给 Hexo 添加一个后台管理页面，可以在浏览器上开箱即用。然后发现了JAMstack（JavaScript+APIs+Markup），通过 JavaScript 和 API 在前端直接增删改查，再触发 CI 来构建、部署。Netlify CMS 就是这样一个 Serverless 的 CMS。\n配置插件 首先安装 hexo-netlify-cms\n1  npm i hexo-netlify-cms --save\r  启用插件并设置自定义配置文件：\n1 2  netlify_cms:config_file:netlify-cms.yaml  在根目录下新建 netlify-cms.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  backend:name:github# 认证方式\rrepo:owner/repobranch:mastermedia_folder:source/images# 媒体源文件夹\rpublic_folder:/images# 生成后的媒体文件夹\rpublish_mode:editorial_workflow# 发布模式\r# 配置自动生成 collection\rauto_generator:post:all_posts:#enabled: true\rlabel:\u0026#34;Post\u0026#34;preview_path:\u0026#34;/posts/{{fields.urlname}}\u0026#34;# 预览地址\rfolder:\u0026#34;source/_posts\u0026#34;# 文章源文件夹\rcreate:true# 允许用户新建文章\reditor:preview:truepage:enabled:trueconfig:label:\u0026#34;Page\u0026#34;delete:falseeditor:preview:true# 设置全局表单\rglobal_fields:over_format:truedefault:- {label:\u0026#34;Title\u0026#34;, name:\u0026#34;title\u0026#34;, widget:\u0026#34;string\u0026#34;}- {label:\u0026#34;Publish Date\u0026#34;, name:\u0026#34;date\u0026#34;, widget:\u0026#34;datetime\u0026#34;, dateFormat:\u0026#34;YYYY-MM-DD\u0026#34;, timeFormat:\u0026#34;HH:mm:ss\u0026#34;, format:\u0026#34;YYYY-MM-DD HH:mm:ss\u0026#34;, required:false}- {label:\u0026#34;Update Date\u0026#34;, name:\u0026#34;updated\u0026#34;, widget:\u0026#34;datetime\u0026#34;, dateFormat:\u0026#34;YYYY-MM-DD\u0026#34;, timeFormat:\u0026#34;HH:mm:ss\u0026#34;, format:\u0026#34;YYYY-MM-DD HH:mm:ss\u0026#34;, required:false}- {label:\u0026#34;Tags\u0026#34;, name:\u0026#34;tags\u0026#34;, widget:\u0026#34;list\u0026#34;, required:false}- {label:\u0026#34;Categories\u0026#34;, name:\u0026#34;categories\u0026#34;, widget:\u0026#34;list\u0026#34;, required:false}- {label:\u0026#34;Permalink\u0026#34;, name:\u0026#34;urlname\u0026#34;, widget:\u0026#34;string\u0026#34;}- {label:\u0026#34;Body\u0026#34;, name:\u0026#34;body\u0026#34;, widget:\u0026#34;markdown\u0026#34;}#post:\r#page:\r  自建 GitHub Oauth 服务 因为我的博客是用 Travis-CI 自动部署到阿里云上，所以没办法用 Git-Gateway 来身份认证。\n而 GitHub Oauth 认证需要服务器验证，解决方法有两个：\n Netlify 提供 自己搭建  在使用 Netlify 的接口时出现无法认证的问题（应该是要在 Netlify 里面绑定域名），耦合度太高了不是很喜欢，而且速度有时候很慢，所以自己搭了一个。\n项目地址：netlify-cms-oauth-provider-python\n首先要修改配置文件：\n1 2 3 4 5  backend:name:githubrepo:owner/repobranch:masterbase_url:https://app.limxw.com# GitHub Oauth 服务地址\r  使用 Docker 部署：\n 使用配置文件：.env  1 2 3  OAUTH_CLIENT_ID=12345OAUTH_CLIENT_SECRET=balabalaREDIRECT_URL=https://your.server.com/callback  REDIRECT_URL：如果需要回调地址与 Oauth 应用程序配置中提供的不同，设置此项。\n1 2 3 4  docker run -itd \\\r -v /your/path/.env:/usr/src/app/.env \\\r -p 7676:80 \\\r winglim/netlifycms-oauth\r  使用环境变量  1 2 3 4  docker run -itd \\\r -e OAUTH_CLIENT_ID=12345 OAUTH_CLIENT_SECRET=balabala \\\r -p 7676:80 \\\r winglim/netlifycms-oauth\r  之后只需要用 nginx 或者 caddy 等软件将域名反向代理到 ip:7676 即可（也可以修改成其他端口\n","description":"","id":2,"section":"posts","tags":["Hexo","Netlify"],"title":"Hexo 使用 Netlify CMS","uri":"https://limxw.com/posts/hexo-%E4%BD%BF%E7%94%A8-netlify-cms/"},{"content":"为了给笔记本装 Mac OS + Windows 双系统，买了一块新固态：东芝RC500，顺便做一个不专业的简单评测。\n一开始以为小米笔记本PRO的第二个 M.2 2280 接口只能用 SATA3 协议的硬盘，查了一下发现是兼容 NVME 和 SATA3 的。不过主硬盘接口的 PCIe 3.0 x4 ，副硬盘接口是 PCIe 3.0 x2 。\n东芝RC500是 PCIe 3.0 x4 的固态，理论上来说插到 PCIe 3.0 x2 的接口上速度会损失一半左右，但实际测试中只有 4K 写入速度损失较大，其他读写损失不大。\n开箱 平平无奇的包装盒，虽然东芝的固态硬盘改名为 KIOXIA（铠侠）了，但 RC500 的包装盒用的还是沿用 TOSHIBA。\nRC500支持NVMe 1.3标准。缓存用的是 H5AN4G6NBJR-UHC，海力士DDR4 DRAM缓存颗粒。主控是东芝 TC58NC1202GST，支持四通道。\n颗粒是东芝原厂的 96 层 TLC。\n性能测试 Crystal Disk Info 传输模式是 PCIe 3.0 x2，待机温度为37度。\nCrystal Disk Mark 顺序读写超过了官方标注的 1700MB/S 和 1600MB/s 4KiB Q32T1 和 4KiB Q1T1 的读取有 PCIe 3.0 x4 下的 70% 左右，而写入就只有 50% 了。\nAS SSD Benchmark 同样的，在 PCIe 3.0 x4 下跑分大概在 4700 左右，PCIe 3.0 x2 下损失了10%左右。\n所以总体而言，插在小米笔记本PRO第二个硬盘接口上，除了4K写入损失较大以外，其他性能基本正常发挥，没有浪费。\n","description":"","id":3,"section":"posts","tags":["SSD"],"title":"东芝RC500开箱及简单评测","uri":"https://limxw.com/posts/%E4%B8%9C%E8%8A%9Drc500%E5%BC%80%E7%AE%B1%E5%8F%8A%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/"},{"content":"在 Windows 下写代码，配置环境总有点蛋疼，而 Linux 的桌面环境又经常会有些bug，于是就给自己笔记本装了个 Hackintosh，不过在笔记本上并不是很完美，记录一下一些解决办法。\nWIFI及蓝牙 使用的硬件  COMFAST 811AC 绿联蓝牙接收器（CSR8510）  因为 macOS 没有 Intel 的 WIFI 驱动，所以小米笔记本板载 WIFI 没办法使用，然后我两个 m.2 口都装了硬盘，没办法用拆机网卡，所以只能使用 USB 网卡。\n而且蓝牙驱动也有问题，不能热加载，就是说想连蓝牙得先在 Windows 上连接，然后重启进入 Hackintosh 才能连接。\n该软件包与此版本的 macOS 不兼容 在安装 WIFI 驱动的时候会出现这个问题：这是因为在 macOS Catalina 中，对系统读写权限加了限制，需要允许安装任意来源的 App，并挂载根目录，才能安装。\n1 2 3  sudo spctl --master-disable # 允许任意来源\rsudo mount -uw / # 挂载根目录\rkillall Finder # 杀掉Finder\r  禁用自带蓝牙 想使用 USB 蓝牙接收器，需要先把笔记本自带的禁用。\n我使用的是 XiaoMi-Pro-Hackintosh 这个 EFI，只需要将 SSDT-USBBT.aml 替换掉/EFI/CLOVER/ACPI/patched/SSDT-USB.aml 即可禁用。\n需要安装驱动的 USB 蓝牙接收器参考这里：蓝牙解决方案\n","description":"","id":4,"section":"posts","tags":["hackintosh","xiaomi"],"title":"小米笔记本PRO折腾黑苹果记","uri":"https://limxw.com/posts/%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AE%B0%E6%9C%ACpro%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"},{"content":"最近重新折腾了一下博客，从动态的 Typecho，WordPress，Ghost 到静态的 Hexo，Hugo 都试了一遍，最后还是决定用 Hexo，仅以此文纪念曾经的博客们。\nPart1 WordPress 最早开始接触到网站应该是2014年，还在读初中的时候，最近看到了 discuz 又还魂了1，想起了当时入坑是因为想要用 dizcuz 搭一个自己的论坛，花了很多时间去找教程，研究了 PHP 和 MySQL 把属于自己的 discuz 论坛搭了起来。\n但是搭完之后发现，论坛只有自己一个人，也没有什么实质性内容能够吸引别人加进来，最后论坛的想法也就不了了之了。\n从 discuz 开始，就逐渐入了网站的坑，既然论坛不行的话就开始捣鼓博客，从 freehao123 上了解了很多关于虚拟主机的知识，尝试了很多免费的虚拟主机和注册了 .tk，.cf 这类免费域名。\n因为 WordPress 用户群体多，也容易找到很多问题的解决方式，所以第一个博客就用了 WordPress 搭了起来。\n但是因为是在免费虚拟主机上搭建的，在当时WordPress 还是是十分重的，而且免费的虚拟主机大多都是在国外，光连接到网站就很费劲了，免费的虚拟主机性能还鶸，导致整个博客访问起来很慢。\n在尝试了用各种缓存插件去优化之后，还是没能达到心理预期，就渐渐对 WordPress 失去了折腾的兴趣。\nPart2 GitHub Issues 因为没钱访问速度太慢放弃了 WordPress 之后，开始寻找其他可以托管的方案，在 v2ex 上逛的时候发现了 Mirror 这个项目：利用 GitHub Repo 的 Issues 来写博客。\n虽然当时 GitHub 的访问速度也不是很理想，但比免费的虚拟主机速度和稳定性都要好很多，评论也有邮件提醒，不用自己去配置，同时还原生支持 MarkDown 写作，用起来还是十分的舒心。\nPart3 FarBox \u0026amp; Bitcron 用 GitHub Issues 来写博客，可自由定制的东西太少了，然后想起之前用过 FarBox ，再去他们官网看的时候发现他们发布了一个新产品 Bitcron ，因为有用过 FarBox 和修改过他们默认主题的经验，就很快的博客转移到了 Bitcron 上，并且移植了一个新的主题：Bitcron-Theme-Silicon\n在放弃 WordPress 的时候发现了 Typecho，轻量，高效，源码+数据库表不到400kb，深得我心，也尝试去搭建过，但是因为那个时候已经高三了，没有时间去维护，毕竟还是穷，一个月要续费一次VPS，没有这个时间，所以博客一直放在 Bitcron 上。\nPart4 Typecho 毕业之后有了钱时间，买了好几个VPS和域名，就把博客迁移到了 Typecho 上，这次也移植了一个主题：Typecho-Theme-AirCloud ，但是有一天上去访问的时候，不知道为什么字体变的很丑，我也懒得去调试修改了，这也让我萌生了重新折腾博客的心思。\nPart5 Hexo 在之前的那么多个博客中，其实驱动我折腾的最主要一个原因就是主题，看到了别人做的好看的主题，然后就想着移植到另一个平台上，再用这个平台来写博客。\n相对于动态博客，静态博客的主题写起来要简单很多，想自己动手写一个主题，就尝试了比较热门的静态生成器 Hexo 和 Hugo。\n虽然说 Hugo 生成页面的速度和效率都要更好一些，但是在 Hexo 中，因为用的是nodejs，highlight.js 这一类插件可以直接生成渲染完之后的 HTML，而不用把 js 放到 footer 中，当用户访问时再动态渲染，提高了访问速度。\n不过这样一来，渲染时花费的时间就增多了，在 Hexo 中 highlight.js 挺影响渲染速度的2，但是现在文章不多的情况下用 Hexo 还是非常快的，先好好写文章，之后有需求了再考虑折腾。\n最后用了 Travis-CI 来自动部署，构建时多花的那些时间也不用太在意了。而且，用静态博客有一个好处：可以只想着怎么写文章，不用考虑怎么去优化页面速度。\nAll in all, let\u0026rsquo;s focus on writing.\n*[PHP]: PHP: Hypertext Preprocessor\n https://www.discuz.net/thread-3847247-1-1.html \u0026#x21a9;\u0026#xfe0e;\n https://blog.skk.moe/post/hexo-performance/#测试结果 \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":5,"section":"posts","tags":["blog"],"title":"博客流浪记","uri":"https://limxw.com/posts/%E5%8D%9A%E5%AE%A2%E6%B5%81%E6%B5%AA%E8%AE%B0/"},{"content":"这两天将博客迁移到 Hexo ，部署在阿里云上，备份放在 GitHub 上，然后自己动手给 Hexo 写了一个主题，名为 Typing，希望更加专注在写文章上。\n功能介绍：\n  自定义 favicon\n  自定义 keywords，优化SEO\n  自定义 footer 信息\n  使用 DisqusJS 实现评论\n  自定义 HTML 的 lang，不用 Hexo 的配置文件来定义是因为换成 zh-cn 后，Moment.js 生成的时间格式是 Chinese Style，比如 “十一月” 这种，然后我自己更喜欢英文的月份，所以在主题配置文件中加了这个选项\n  使用方式：\n1  git clone https://github.com/WingLim/Hexo-Theme-Typing.git themes/Typing\r  修改网站根目录下的_config.yml\n1  theme:Typing  GitHub Repo：Hexo-Theme-Typing\nTODO：\n  Optimizate SEO\n  Comment\n ","description":"","id":6,"section":"posts","tags":["Hexo","Theme"],"title":"Hexo 主题 Typing","uri":"https://limxw.com/posts/hexo-%E4%B8%BB%E9%A2%98-typing/"},{"content":"A HDUer\n鶸鸡一个，主要玩 Web 和 Python，偶尔也会折腾一些热门/新奇的软硬件。\n喜欢用的网名是：WingLim、NULL、二木文\n以前也用过的名字：zhaiblog、lweiny\nDevices  小米笔记本PRO Honor Magic 2 Apple iPhone 7 Samsung Tab S4 黑加手环 Amazon Kindle 499 已经成尸体的小米6  ","description":"","id":7,"section":"","tags":null,"title":"About Me","uri":"https://limxw.com/about/"},{"content":"最近在用 Oh My ZSH! ，然后在 WSL(Windows Subsystem for Linux)上也安装了 zsh 和 Oh My ZSH! 但是在设置默认 SHELL 时出现了问题。\nLinux 下设置默认 SHELL 方法如下：\n1  chsh -s /bin/zsh\r  但重新在 CMD/POWERSHELL 上进入 WSL ，默认的 SHELL 还是 bash ，需要手动执行 $ zsh才能进入。\n于是在 Google 上查了一下，发现在 Microsoft 的 Github 上面有一个提交 Bug 的 Repository：Microsoft/WSL 上有一个 issue：\ncan\u0026rsquo;t change default shell #477\n出现这个问题的原因是在启动 WSL 时没有执行 login 相关的组件，而这些组件和设置默认 SHELL 有关。\n We don\u0026rsquo;t run login which is the component that normally sets those things up.\n 解决方法 打开 ~./bashrc 添加下列代码进去并保存即可。\n1  [[ $- == *i* ]] \u0026amp;\u0026amp; $(command -v zsh) || echo \u0026#34;ZSH is not installed\u0026#34;\r  命令的具体解释在这里：https://github.com/Microsoft/WSL/issues/477#issuecomment-441164103\n","description":"","id":8,"section":"posts","tags":["WSL","Linux"],"title":"WSL 中设置 zsh 为默认 SHELL","uri":"https://limxw.com/posts/wsl-%E4%B8%AD%E8%AE%BE%E7%BD%AE-zsh-%E4%B8%BA%E9%BB%98%E8%AE%A4-shell/"},{"content":"在社团的活动室发现了一台闲置的服务器，服务器用的是学校的网络，没有公网IP，只能局域网访问，所以用 frp 搭了个内网穿透，然后为了方便部署服务端，就写了个一键安装脚本。\n介绍 脚本会自动从 frp 中获取最新的 release\n注意：目前只有安装服务端的功能，并且只保留 frps 的二进制文件\n脚本创建一个 frps.service 来控制 frps 的开关，默认开启开机自启\nfrps 安装在 /usr/local/frp\n配置文件在 /usr/local/frp/frps.ini\n使用方法 安装 1 2 3  wget https://raw.githubusercontent.com/WingLim/frp_install_script/master/frps.sh\rsudo chmod +x frps.sh\rsudo ./frps.sh 2\u0026gt;\u0026amp;1 | tee frps.log\r  使用命令 1 2 3  systemctl start frps # 启动 frps\rsystemctl stop frps # 停止 frps\rsystemctl status frps # 关闭 frps\r  TODO：\n frp 一键安装客户端脚本 ","description":"","id":9,"section":"posts","tags":["frp","script"],"title":"frp 一键安装脚本","uri":"https://limxw.com/posts/frp-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/"}]