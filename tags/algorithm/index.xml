<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>algorithm on 二木浮生记</title><link>https://limxw.com/tags/algorithm/</link><description>Recent content in algorithm on 二木浮生记</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>winglim@qq.com (WingLim)</managingEditor><webMaster>winglim@qq.com (WingLim)</webMaster><lastBuildDate>Thu, 12 Mar 2020 23:51:34 +0800</lastBuildDate><atom:link href="https://limxw.com/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>算法学习：寻找第K大的数-Python</title><link>https://limxw.com/posts/algorithm-learning-findk-python/</link><pubDate>Thu, 12 Mar 2020 23:51:34 +0800</pubDate><author>winglim@qq.com (WingLim)</author><atom:modified>Thu, 12 Mar 2020 23:51:34 +0800</atom:modified><guid>https://limxw.com/posts/algorithm-learning-findk-python/</guid><description>原理 挑选基准值 从数组中挑出一个元素作为基准，这里选择数列中第一个元素作为基准。
分割 重新排序数组，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。
递归寻找 分割完成后，返回基准值在数组中的位置 i，因为数组下标从 0 开始，所以第 K 大的数在数组中的下标为 k-1 ，
如果 i == k-1，则说明这个基准值就是第 K 大的数 如果 i &amp;gt; k-1，则第 K 大的数在基准值的左半部分 如果 i &amp;lt; k-1，则第 K 大的数在基准值的右半部分 情况 1 直接返回基准值，情况 2，3 则继续递归寻找。
实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 将数组分割 def partition(s, low, high): # 取第一个数为基准值 pivot, j = s[low], low for i in range(low + 1, high + 1): if s[i] &amp;lt;= pivot: j += 1 s[i], s[j] = s[j], s[i] s[j], s[low] = s[low], s[j] return j def findK(s, start, end, k): i = partition2(s, start, end) if i == k-1: return s[k-1] elif i &amp;gt; k-1: return findK(s, start, i-1, k) elif i &amp;lt; k-1: return findK(s, i+1, end, k) return 0 if __name__ == &amp;#34;__main__&amp;#34;: arr = [int(n) for n in input(&amp;#34;输入数组:&amp;#34;).</description><dc:creator>WingLim</dc:creator><category>algorithm</category><category>Python</category><category>学习</category><category>Algorithm Learning</category></item></channel></rss>